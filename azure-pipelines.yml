name:  $[format('{0:yyyyMMdd\-HHmmss}', pipeline.startTime)]

variables:
  CURRENT_DATE: $[format('{0:yyyyMMdd\-HHmmss}', pipeline.startTime)]
  REPOSITORY_NAME: $(Build.Repository.Name)
  COMMIT_TAG: $(git log --format=%h -1)

  - job: build_dsi_3ds
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build DSi & 3DS themes"
    steps:
    - script: |
        curl -L https://github.com/devkitPro/pacman/releases/download/devkitpro-pacman-1.0.1/devkitpro-pacman.deb -o pacman.deb
        sudo apt update
        # Install haveged to ensure enough entropy
        sudo dpkg -i pacman.deb
        sudo dkp-pacman -Sy
        sudo dkp-pacman -S nds-dev --noconfirm
      displayName: 'Install devkitPro'
    - script: |
          cd romsel_dsimenutheme/
          make
        displayName: "Make DSi & 3DS themes"
    - script: |
          mv romsel_dsimenutheme.nds dsimenu.srldr
          cp dsimenu.srldr $(Build.ArtifactStagingDirectory)/dsimenu.srldr
        displayName: 'Add the build to Azure'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'dsimenu.srldr'

  - job: build_ak
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build Acekard theme"
    steps:
    - script: |
        curl -L https://github.com/devkitPro/pacman/releases/download/devkitpro-pacman-1.0.1/devkitpro-pacman.deb -o pacman.deb
        sudo apt update
        # Install haveged to ensure enough entropy
        sudo dpkg -i pacman.deb
        sudo dkp-pacman -Sy
        sudo dkp-pacman -S nds-dev --noconfirm
      displayName: 'Install devkitPro'
    - script: |
          cd romsel_aktheme/
          make
        displayName: "Make Acekard theme"
    - script: |
          mv romsel_aktheme.nds akmenu.srldr
          cp akmenu.srldr $(Build.ArtifactStagingDirectory)/akmenu
        displayName: 'Add the build to Azure'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'akmenu'
          
 
  - job: build_r4
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build R4 theme"
    steps:
    - script: |
        curl -L https://github.com/devkitPro/pacman/releases/download/devkitpro-pacman-1.0.1/devkitpro-pacman.deb -o pacman.deb
        sudo apt update
        # Install haveged to ensure enough entropy
        sudo dpkg -i pacman.deb
        sudo dkp-pacman -Sy
        sudo dkp-pacman -S nds-dev --noconfirm
      displayName: 'Install devkitPro'
    - script: |
          cd romsel_r4theme/
          make
        displayName: "Make R4 theme"
    - script: |
          mv romsel_r4theme.nds r4menu.srldr
          cp r4menu.srldr $(Build.ArtifactStagingDirectory)/r4menu
        displayName: 'Add the build to Azure'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'r4menu'

  - job: build_settings
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build Settings"
    steps:
    - script: |
        curl -L https://github.com/devkitPro/pacman/releases/download/devkitpro-pacman-1.0.1/devkitpro-pacman.deb -o pacman.deb
        sudo apt update
        # Install haveged to ensure enough entropy
        sudo dpkg -i pacman.deb
        sudo dkp-pacman -Sy
        sudo dkp-pacman -S nds-dev --noconfirm
      displayName: 'Install devkitPro'
    - script: |
          cd settings/
          make
        displayName: "Make Settings"
    - script: |
          mv settings.nds settings.srldr
          cp settings.srldr $(Build.ArtifactStagingDirectory)/settings.srldr
        displayName: 'Add the build to Azure'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'settings'

  - job: build_title
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build Title (main.srldr)"
    steps:
    - script: |
        curl -L https://github.com/devkitPro/pacman/releases/download/devkitpro-pacman-1.0.1/devkitpro-pacman.deb -o pacman.deb
        sudo apt update
        # Install haveged to ensure enough entropy
        sudo dpkg -i pacman.deb
        sudo dkp-pacman -Sy
        sudo dkp-pacman -S nds-dev --noconfirm
      displayName: 'Install devkitPro'
    - script: |
          cd settings/
          make
        displayName: "Make main.srldr"
    - script: |
          mv title.nds main.srldr
          cp main.srldr $(Build.ArtifactStagingDirectory)/main.srldr
        displayName: 'Add the build to Azure'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'title'
          
  - job: build_mn
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build Manual Mainmenu & Slot-1-Launch"
    steps:
    - script: |
        curl -L https://github.com/devkitPro/pacman/releases/download/devkitpro-pacman-1.0.1/devkitpro-pacman.deb -o pacman.deb
        sudo apt update
        # Install haveged to ensure enough entropy
        sudo dpkg -i pacman.deb
        sudo dkp-pacman -Sy
        sudo dkp-pacman -S nds-dev --noconfirm
      displayName: 'Install devkitPro'
    - script: |
          cd manual/
          make
          cd ../mainmenu/
          make
          cd ../slot1launch/
          make
        displayName: "Make Manual, Main Menu & Slot1Launch"
    - script: |
          mv manual.nds manual.srldr
          mv mainmenu.nds mainmenu.srldr
          mv slot1launch.nds slot1launch.srldr
          cp manual.srldr $(Build.ArtifactStagingDirectory)/manual.srldr
          cp mainmenu.srldr $(Build.ArtifactStagingDirectory)/mainmenu.srldr
          cp slot1launch.srldr $(Build.ArtifactStagingDirectory)/slot1launch.srldr
        displayName: 'Add the build to Azure'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'manual-mainmenu-slot1launch'

  - job: build_booters
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build Booter, Booter_FC & Rungame"
    steps:
    - script: |
        curl -L https://github.com/devkitPro/pacman/releases/download/devkitpro-pacman-1.0.1/devkitpro-pacman.deb -o pacman.deb
        sudo apt update
        # Install haveged to ensure enough entropy
        sudo dpkg -i pacman.deb
        sudo dkp-pacman -Sy
        sudo dkp-pacman -S nds-dev --noconfirm
      displayName: 'Install devkitPro'
    - script: |
          cd booter/
          make
          cd ../booter_fc/
          make
          cd ../rungame/
        displayName: "Make Booter, Booter_FC & Rungame"
    - script: |
        cd booter/
        chmod +x make_cia
        ./make_cia --srl="booter.nds"
        mkdir -p "../7zfile/3DS - CFW users/"
        cd ../rungame/
        chmod +x make_cia
        ./make_cia --srl="rungame.nds"
      displayName: 'Make Booter & Rungame cias'
    - script: |
          mv booter.nds boot.nds
          mv booter_fc.nds boot_fc.nds
          mv "booter.cia" "TWiLight Menu.cia"
          mv "rungame.cia" "TWiLight Menu - Game booter.cia"
          cp boot.nds $(Build.ArtifactStagingDirectory)/boot.nds
          cp boot_fc.nds $(Build.ArtifactStagingDirectory)/boot_fc.nds
          cp "TWiLight Menu.cia" $(Build.ArtifactStagingDirectory)/"TWiLight Menu.cia"
          cp "TWiLight Menu - Game booter.cia" $(Build.ArtifactStagingDirectory)/"TWiLight Menu - Game booter.cia"
        displayName: 'Add the build to Azure'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'boot-boot_fc-rungame'
        
  - job: docker_build
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build with Docker using forked libnds and devkitARM r50"
    steps:
      - script: |
          sudo apt update
          sudo apt install p7zip-full
        displayName: "Install 7zip"
      - script: |
          docker build -t twilightmenu --label twilightmenu ./docker
          docker ps -a
        displayName: "Build Docker image"
      - script: |
          rm -r 7zfile/_nds/TWiLightMenu/*
        displayName: "Cleaning themes from build directory"
      - script: |
          docker run --rm -i -v "$(Build.SourcesDirectory):/data" twilightmenu make package
        displayName: "Build TWiLightMenu++ with Docker using forked libnds and devkitARM r50"
      - script: |
          mv 7zfile/ TWiLightMenu/
          7z a TWiLightMenu.7z TWiLightMenu/
          cp TWiLightMenu.7z $(Build.ArtifactStagingDirectory)/TWiLightMenu_docker.7z
        displayName: 'Pack 7z Package'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'build-devkitARM-Docker'

  - job: make_final_package
    displayName: "Put everything together"
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'dsimenu'
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'r4menu'
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'akmenu'
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'settings'
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'title'
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'boot-boot_fc-rungame'
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'manual-mainmenu-slot1launch'
        displayName: "Retrieving all build artifacts"
      - script: |
          rm -r 7zfile/_nds/TWiLightMenu/*
          mv mainmenu.srldr manual.srldr akmenu.srldr r4menu.srldr dsimenu.srldr slot1launch.srldr 7zfile/_nds/TWiLightMenu/
          sudo apt update
          sudo apt install p7zip-full
          mv 7zfile/ TWiLightMenu/
          7z a TWiLightMenu.7z TWiLightMenu/
          cp TWiLightMenu.7z $(Build.ArtifactStagingDirectory)/TWiLightMenu.7z
        displayName: 'Install 7zip & Pack 7z Package'
      - task: PublishBuildArtifacts@1
        displayName: "Publish package to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'build-mega-package'

    # Only run this for non-PR jobs.
  - job: publish_build_twlbot
    displayName: "Publish build to TWLBot"
    dependsOn: 
      - latest_build
      - docker_build
    condition: and(succeeded('latest_build'), succeeded('docker_build'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))
    
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'build-mega-package'
        displayName: "Retrieving artifacts from devkitARM Build"
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'build-devkitARM-Docker'
        displayName: "Retrieving artifacts from Docker build"
      - script: 
          ls -a $(Build.ArtifactStagingDirectory)
      - script: |
          echo '##vso[task.setvariable variable=COMMIT_TAG]'$(git log --format=%h -1)
          echo '##vso[task.setvariable variable=COMMIT_MESSAGE]'$(git log --pretty=format:"%an - %s" -1)

          git config --global user.email "flamekat54@aol.com"
          git config --global user.name "TWLBot"
          git clone https://$GITHUB_TOKEN@github.com/TWLBot/Builds.git
          cd Builds/
          cp $(Build.ArtifactStagingDirectory)/build-devkitARM-latest/TWiLightMenu.7z TWiLightMenu.7z
          cp $(Build.ArtifactStagingDirectory)/build-devkitARM-Docker/TWiLightMenu_docker.7z TWiLightMenu_docker.7z
          git stage .
          git commit -m "TWiLightMenu | $(COMMIT_TAG)"
          git push origin master
          git tag v$CURRENT_DATE

          echo '##vso[task.setvariable variable=TWLBOT_COMMIT]'$(git log -1 --format="%H")
        displayName: "Commit and push to TWLBot/Builds"

      - task: GitHubRelease@0
        displayName: "Release to TWLBot/Builds"
        inputs:
          gitHubConnection: TWLBot
          repositoryName: TWLBot/Builds
          action: create
          target: $(TWLBOT_COMMIT)
          tagSource: 'manual'
          tag: v$(CURRENT_DATE)
          title: TWiLightMenu | $(COMMIT_TAG)
          releaseNotesSource: input
          releaseNotes: $(COMMIT_MESSAGE)
          assets: '$(Build.ArtifactStagingDirectory)/**/*.7z'
          isPreRelease: true
          addChangeLog: false

  - job: send_webhook_success
    dependsOn: publish_build_twlbot
    displayName: Send Discord Success Webhook
    condition: and(succeeded('publish_build_twlbot'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))
    steps: 
      - script: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-azure.sh
          chmod +x send.sh
          ./send.sh success $WEBHOOK_URL
        displayName: "Send success webhook"
  - job: send_webhook_failure
    dependsOn: publish_build_twlbot
    displayName: Send Discord Failure Webhook
    condition: and(or(failed('publish_build_twlbot'), failed('latest_build'), failed('docker_build')), not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))
    steps: 
      - script: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-azure.sh
          chmod +x send.sh
          ./send.sh failure $WEBHOOK_URL
        displayName: "Send failure webhook"
